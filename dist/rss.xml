<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/scripts/pretty-feed-v3.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:h="http://www.w3.org/TR/html4/"><channel><title>gr1d-init</title><description>No logs, no traces</description><link>https://gr1d-init.github.io</link><item><title>pingCTF 2025</title><link>https://gr1d-init.github.io/blog/pingctf2025</link><guid isPermaLink="true">https://gr1d-init.github.io/blog/pingctf2025</guid><description>Writeups for pingCTF 2025</description><pubDate>Mon, 24 Mar 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Misc&lt;/h2&gt;
&lt;h2&gt;ones-and-zeroes&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.CRaq_wyo_Z2kYfNS.webp&quot; alt=&quot;Question&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Download PulseView to decode the I2C signal&lt;/li&gt;
&lt;li&gt;Identify the SDA and SCL, decode the signal, focus on DATA WRITE hexdump.&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/hexdump.JjLducdK_Z1688Q0.webp&quot; alt=&quot;hexdump&quot;&gt;&lt;/li&gt;
&lt;li&gt;Research on connection between I2C port, how it communicate with LCD pane.&lt;/li&gt;
&lt;li&gt;From LCD pane datasheet, decode the message.
https://cdn.sparkfun.com/assets/9/5/f/7/b/HD44780.pdf&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Identify the pinouts and we realise that the focus is only on I2C outputs SDA and SCL, at the end passing to HD44780 LCD Pane, so we don&apos;t bother anything on breadboard.
&lt;img src=&quot;https://gr1d-init.github.io/_astro/setup1.CB43ILVn_23kalz.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;./assets/ref.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since we are the LED controller is PCF8574, we are going to operate HD44780 on 4-bit data mode.&lt;br&gt;
To retrieve a single ASCII Hex character, it work on High nibble and Low nibble.&lt;br&gt;
As in hexdump instruction, it exist like this:&lt;br&gt;
- High nibble, E(Enable)= 1&lt;br&gt;
- High nibble, E(Enable) = 0&lt;br&gt;
- Low nibble, E(Enable) = 1&lt;br&gt;
- Low nibble, E(Enable) = 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dissect the High Nibble and Low Nibble binaries, combine them into single series, decode it into ascii characters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solution overview&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/overview.DLUu8Wwu_i0jbH.webp&quot; alt=&quot;Overview&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;pingCTF{Silicon_Is_Talking_To_Me}&lt;/code&gt;&lt;/p&gt;</content:encoded><h:img src="/_astro/pingCTFbanner.1jdtJ9nV.png"/><enclosure url="/_astro/pingCTFbanner.1jdtJ9nV.png"/></item><item><title>KalmarCTF 2025</title><link>https://gr1d-init.github.io/blog/kalmarctf2025</link><guid isPermaLink="true">https://gr1d-init.github.io/blog/kalmarctf2025</guid><description>Writeups for kalmarCTF 2025</description><pubDate>Tue, 11 Mar 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Misc&lt;/h2&gt;
&lt;h2&gt;babyKalmarCTF&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Question: Ever played a CTF inside a CTF?

We were looking for a new scoring algorithm which would both reward top teams for solving super hard challenges, but also ensure that the easiest challenges wouldn&apos;t go to minimum straight away if more people played than we expected.

Thats when we came across this ingenious suggestion! sigpwny/ctfd-dynamic-challenges-mod#1

We&apos;ve implemented it this scoring idea(see here: https://github.com/blatchley/ctfd-dynamic-challenges-mod ) and spun up a small test ctf to test it out.

If you manage to win babykalmarCTF, we&apos;ll even give you a flag at /flag!

Spin up your own personal babykalmarCTF here: https://lab1.kalmarc.tf/
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Trick the dynamic CTF scoring system.&lt;/li&gt;
&lt;li&gt;Solve all the solvable CTF challenges.&lt;/li&gt;
&lt;li&gt;Spam fake team registrations on the platform.&lt;/li&gt;
&lt;li&gt;Outperform Kalmarunionen&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;p&gt;Credit: @OS1R1S &lt;em&gt;for babyKalmarCTF challenges&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Within babyKalmarCTF there are several categories of challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Baby&apos;s first RSA adventure (Crypto)&lt;/li&gt;
&lt;li&gt;My First Flagchecker (Reverse)&lt;/li&gt;
&lt;li&gt;THE OSINT CHALLENGE (OSINT)&lt;/li&gt;
&lt;li&gt;Baffling, Ridiculous And Intriguing Letters, Laughter Ensues! (Misc)&lt;/li&gt;
&lt;li&gt;Welcome Flag (Welcome)&lt;/li&gt;
&lt;li&gt;Simple  Math Challenge (Impossible)&lt;/li&gt;
&lt;li&gt;Baby&apos;s Second RSA (Impossible)&lt;/li&gt;
&lt;li&gt;A randcrack challenge (Impossible)&lt;/li&gt;
&lt;li&gt;The Last Step (Impossible)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Welcome Flag:&lt;br&gt;
&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;babykalmar{welcome_to_babykalmar_CTF}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My First Flagchecker:&lt;br&gt;
&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;babykalmar{string_compare_rev_ayoooooooo}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;THE OSINT CHALLENGE:&lt;br&gt;
&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;babykalmar{aarhus}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Baffling, Ridiculous And Intriguing Letters, Laughter Ensues:&lt;br&gt;
&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;BABYKALMAR{SUPERORIGINALMORSECODECHALLENGE}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Baby&apos;s first RSA adventure:&lt;br&gt;
&lt;strong&gt;Flag&lt;/strong&gt;: &lt;code&gt;babykalmar{wow_you_are_an_rsa_master!!!!!}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;After solving all the challenges, we have to trick the scoring system. The script as below, to spam fake team registration, we designed an Auto Webform Filler.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from selenium import webdriver
from selenium.webdriver.common.by import By
import time

# Set up Firefox WebDriver
options = webdriver.FirefoxOptions()
options.headless = False

driver = webdriver.Firefox(options=options)

register_url = &quot;https://45d9cb6b475c2631a4b32ccd8e0bcf6a-59591.inst1.chal-kalmarc.tf/register&quot;
team_url = &quot;https://45d9cb6b475c2631a4b32ccd8e0bcf6a-59591.inst1.chal-kalmarc.tf/teams/new&quot;
logout_url = &quot;https://45d9cb6b475c2631a4b32ccd8e0bcf6a-59591.inst1.chal-kalmarc.tf/logout&quot;

for i in range(100): 
    driver.get(register_url)
    
    username = f&quot;FakeUser{i}&quot;
    email = f&quot;fakeuser{i}@example.com&quot;
    password = &quot;P@ssw0rd123&quot;

    driver.find_element(By.ID, &quot;name&quot;).send_keys(username)
    driver.find_element(By.ID, &quot;email&quot;).send_keys(email)
    driver.find_element(By.ID, &quot;password&quot;).send_keys(password)

    driver.find_element(By.ID, &quot;_submit&quot;).click()

    time.sleep(2)

    driver.get(team_url)
    
    team_name = f&quot;FakeTeam{i}&quot;
    driver.find_element(By.ID, &quot;name&quot;).send_keys(team_name)
    driver.find_element(By.ID, &quot;password&quot;).send_keys(&quot;TeamP@ssw0rd&quot;)

    driver.find_element(By.ID, &quot;_submit&quot;).click()

    print(f&quot;Registered {username} &amp;#x26; Created Team {team_name}&quot;)

    driver.get(logout_url)
    time.sleep(2) 

driver.quit()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/webform.Cf8SJwFB_Z1xiINy.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/result.CCB27VLr_2luLlg.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;kalmar{w0w_y0u_b34t_k4lm4r_1n_4_c7f?!?}&lt;/code&gt;&lt;/p&gt;</content:encoded><h:img src="/_astro/kalmarCTFbanner.k231OVd_.png"/><enclosure url="/_astro/kalmarCTFbanner.k231OVd_.png"/></item><item><title>picoCTF 2025</title><link>https://gr1d-init.github.io/blog/picoctf2025</link><guid isPermaLink="true">https://gr1d-init.github.io/blog/picoctf2025</guid><description>Writeups for picoCTF 2025</description><pubDate>Tue, 11 Mar 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;[Reverse Engineering]&lt;/h2&gt;
&lt;h2&gt;Flag Hunters&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.D4LF0PKC_ZrNLQ6.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;p&gt;When the program starts, the lip is set to the line [VERSE], to retrieve the secret_intro, we need to alter the program so the lip variable set to the line of flag&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pico warriors rising, puzzles laid bare,
Solving each challenge with precision and flair.
With unity and skill, flags we deliver,
The ether’s ours to conquer, &apos;&apos;&apos;\
+ flag + &apos;\n&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as shown, flag is at line 4&lt;/p&gt;
&lt;p&gt;so passing index 0 to 3 will works, printing at the start of the lines at most line 4, index 3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Payload:&lt;/strong&gt; &lt;code&gt;&amp;#x3C;any_text&gt;;RETURN &amp;#x3C;0 to 3&gt;   (This is not injection)&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{70637h3r_f0r3v3r_c659e814}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Quantum Scrambler&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.BuyNjina_1PqRsl.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Decrypt the encryption and retrieve the flag&lt;/li&gt;
&lt;li&gt;Dissect the elements, and observe the scramble&lt;/li&gt;
&lt;li&gt;Found final payload, decrypt with reversed scrambler&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Reversed scrambler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import ast

def flatten(lst):
    flat = []
    for item in lst:
        if isinstance(item, list):
            flat.extend(flatten(item))
        else:
            flat.append(item)
    return flat

def unscramble(cypher):
    print(&quot;Outer list elements:&quot;)
    for index, element in enumerate(cypher):
        print(f&quot;Element {index}: {element}&quot;)
    print(&quot;-&quot; * 40)
    
    flat_list = flatten(cypher)
    
    hex_strings = [s for s in flat_list if isinstance(s, str) and s.startswith(&quot;0x&quot;)]
    
    flag_chars = [chr(int(h, 16)) for h in hex_strings]
    flag = &apos;&apos;.join(flag_chars)
    return flag

def main():
    input_file = &apos;output.txt&apos;
    
    try:
        with open(input_file, &apos;r&apos;) as f:
            cipher_text = f.read()
    except Exception as e:
        print(f&quot;Error reading file {input_file}: {e}&quot;)
        return
    
    try:
        cypher = ast.literal_eval(cipher_text)
    except Exception as e:
        print(&quot;Error interpreting cipher text:&quot;, e)
        return
    
    flag = unscramble(cypher)
    print(&quot;Recovered flag:&quot;, flag)

if __name__ == &apos;__main__&apos;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Final payload:&lt;/strong&gt; &lt;code&gt;[[&apos;0x70&apos;],[&apos;0x69&apos;],[&apos;0x63&apos;],[&apos;0x6f&apos;],[&apos;0x43&apos;],[&apos;0x54&apos;],[&apos;0x46&apos;],[&apos;0x7b&apos;],[&apos;0x70&apos;],[&apos;0x79&apos;],[&apos;0x74&apos;],[&apos;0x68&apos;],[&apos;0x6f&apos;],[&apos;0x6e&apos;],[&apos;0x5f&apos;],[&apos;0x69&apos;],[&apos;0x73&apos;],[&apos;0x5f&apos;],[&apos;0x77&apos;],[&apos;0x65&apos;],[&apos;0x69&apos;],[&apos;0x72&apos;],[&apos;0x64&apos;],[&apos;0x65&apos;],[&apos;0x66&apos;],[&apos;0x38&apos;],[&apos;0x65&apos;],[&apos;0x61&apos;],[&apos;0x30&apos;],[&apos;0x63&apos;],[&apos;0x66&apos;],[&apos;0x7d&apos;]]&lt;/code&gt;&lt;br&gt;
&lt;em&gt;Save this as output.txt&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{python_is_weirdef8ea0cf}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Binary Instrumentation 1&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.CNmZgqmX_7jYbq.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The binary bininst1.exe calls the &lt;code&gt;Sleep&lt;/code&gt; function from kernel32.dll&lt;/li&gt;
&lt;li&gt;Using frida-trace, we generate the handler scripts for API functions&lt;/li&gt;
&lt;li&gt;Intercept any call to &lt;code&gt;Sleep&lt;/code&gt;, in this case, under &lt;code&gt;KERNEL32.dll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We then set sleep duration to 0, avoiding the program from sleeping.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Using frida-trace&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;frida-trace -i &quot;Sleep&quot; ./bininst1.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Intercept the handler, by modifying the handler generated, changing sleep duration to zero.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// KERNEL32.DLL/Sleep.js
var sleepAddr = Module.getExportByName(&quot;kernel32.dll&quot;, &quot;Sleep&quot;);
Interceptor.attach(sleepAddr, {
    onEnter: function (args) {
        // Log the original sleep duration (for debugging)
        console.log(&quot;Original sleep time: &quot; + args[0].toInt32());
        // Change the sleep duration to 0
        args[0] = ptr(0);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{r3d_1s_th3_ult1m4t3_cur3_f0r_54dn355_}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Binary Instrumentation 2&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.CdWZ-AHf_Z19GuAN.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Disassemble with ghidra, look for suspicious function&lt;/li&gt;
&lt;li&gt;Hook with frida&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Deploy the script that hook suspicious function at &lt;code&gt;0x1dc0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Get the module base address for bininst2.exe
var moduleBase = Module.findBaseAddress(&quot;bininst2.exe&quot;);
console.log(&quot;Module base address: &quot; + moduleBase);

// Calculate the target function address using a known offset (update this offset as needed)
var funOffset = 0x1dc0; // Adjust this based on your analysis
var targetFunction = moduleBase.add(funOffset);
console.log(&quot;Hooking function at: &quot; + targetFunction);

// Hook the target function (FUN_140001dc0)
Interceptor.attach(targetFunction, {
    onEnter: function(args) {
        // Assume:
        //   args[0] is a pointer to the flag data
        //   args[1] is the length of the flag data
        var length = args[1].toInt32();
        try {
            // Try to read the flag data as a UTF-8 string
            var flagData = Memory.readUtf8String(args[0], length);
            console.log(&quot;Flag data intercepted (utf8): &quot; + flagData);
        } catch (err) {
            console.log(&quot;Error reading flag data as UTF-8: &quot; + err);
            // If reading as a string fails, dump the raw bytes
            console.log(&quot;Flag data intercepted (raw):\n&quot; + hexdump(args[0], { length: length, header: true, ansi: false }));
        }
    },
    onLeave: function(retval) {
        console.log(&quot;FUN_140001dc0 returned: &quot; + retval);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Run the script, then find for the flag&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;frida -l &amp;#x3C;script&gt;.js -f ./bininst2.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Base64 Encoded Flag:&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/solution.BxGutl3z_1IGleY.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{fr1da_f0r_b1n_in5trum3nt4tion!_b21aef39}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;[Forensics]&lt;/h2&gt;
&lt;h2&gt;RED&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.CdfRLhKv_Z6uKu6.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Steganography, just upload to Aperi&apos;Solve, ez flag&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/solution.CqqNXB79_2luwlo.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{r3d_1s_th3_ult1m4t3_cur3_f0r_54dn355_}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;flags are stepic&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.Da1iaKMg_ZH7ede.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Find the country that doesn&apos;t exist, the flag persists&lt;/li&gt;
&lt;li&gt;Download the country flag&lt;/li&gt;
&lt;li&gt;Search for stepic tool&lt;br&gt;
- https://shankaraman.wordpress.com/tag/ctf/&lt;br&gt;
- https://code.tools/man/1/stepic/&lt;br&gt;
- https://pypi.org/project/stepic/&lt;/li&gt;
&lt;li&gt;Install stepic tool through pip&lt;/li&gt;
&lt;li&gt;Unhide the flag&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/upz.C2g3mM-C_EB0TR.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{fl4g_h45_fl4g57f48d94}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Ph4nt0m 1ntrud3r&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.BGJIE0a9_Z1Ilkfj.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Sort the time, since the reference times are messed up&lt;/li&gt;
&lt;li&gt;Decode flag encoded in base64 in a series of consecutive packets&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/solution.DRuGFjYT_ZtcO0W.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{1t_w4snt_th4t_34sy_tbh_4r_e5e8c78d}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Event-Viewing&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.BX-UQJ4U_6T3gD.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Lookup 1033 Event, msi package install event id&lt;/li&gt;
&lt;li&gt;Filter with date and time, look for suspicious event after 1033 happen within a short time range, about 20 minutes, found&lt;/li&gt;
&lt;li&gt;&quot;EVERY TIME&quot; &amp;#x3C;---(from question), so clear date and time filter, find with keyword &quot;shutdown.exe&quot; throughout whole event log&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Part 1:&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/part1log.kv7akOGi_Ztx4yX.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;Base64:&lt;/strong&gt; &lt;code&gt;cGljb0NURntFdjNudF92aTN3djNyXw==&lt;/code&gt;
&lt;strong&gt;Flag 1:&lt;/strong&gt; &lt;code&gt;picoCTF{Ev3nt_vi3wv3r_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Part 2:&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/part2log.CUvMGrw9_ZvrVcV.webp&quot; alt=&quot;&quot;&gt;
&lt;strong&gt;Base64:&lt;/strong&gt; &lt;code&gt;MXNfYV9wcjN0dHlfdXMzZnVsXw==&lt;/code&gt;
&lt;strong&gt;Flag 2:&lt;/strong&gt; &lt;code&gt;1s_a_pr3tty_us3ful_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Part 3:&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/part3log.ezD40MZv_Z2kUyaA.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;Base64:&lt;/strong&gt; &lt;code&gt;dDAwbF84MWJhM2ZlOX0=&lt;/code&gt;
&lt;strong&gt;Flag 3:&lt;/strong&gt; &lt;code&gt;t00l_81ba3fe9}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{Ev3nt_vi3wv3r_1s_a_pr3tty_us3ful_t00l_81ba3fe9}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;[Binary Exploitation]&lt;/h2&gt;
&lt;h2&gt;PIE TIME&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.Ca4ZVEOY_2rbfY3.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Call the win() function&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Disassemble with gdb&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/disass.MY8Sw7pT_Zvbbx7.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Observe the difference in address between main function and win function
The difference is 0x96, thus, to call the function&apos;s address, it must always be &lt;code&gt;main()&lt;/code&gt; - &lt;code&gt;0x96&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Launch the challenge&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/solution.fxn2ZW8i_ZTyh7q.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{b4s1c_p051t10n_1nd3p3nd3nc3_a267144a}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;[General Skills]&lt;/h2&gt;
&lt;h2&gt;YaraRules0x100&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.DG7V_clH_Z1vIV7F.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;To detect malware sample with YARA rule while avoiding false positives and false negatives.&lt;/li&gt;
&lt;li&gt;Malware can exist in packed(obfuscated) or unpacked(fully extracted in memory), the rule should cover both version.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;rule suspacked
{
    strings:
        $packed_div = &quot;.text$div&quot;

    condition:
        all of them
}

rule susunpacked
{
    strings:
        $unpacked_xml = &quot;&amp;#x3C;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos; standalone=&apos;yes&apos;?&gt;&quot;
        $unpacked_dll = &quot;ADVAPI32.dll&quot;

    condition:
        all of them
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Search for yara rule, follow the hint given, work with the format:
https://yara.readthedocs.io/en/stable/writingrules.html&lt;/li&gt;
&lt;li&gt;Open file with ghidra, search for strings, do trial and error&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Flag:&lt;/strong&gt; &lt;code&gt;picoCTF{yara_rul35_r0ckzzz_74c37bd8}&lt;/code&gt;&lt;/p&gt;</content:encoded><h:img src="/_astro/picoCTFbanner.BBuZga6A.png"/><enclosure url="/_astro/picoCTFbanner.BBuZga6A.png"/></item><item><title>EQCTF 2025</title><link>https://gr1d-init.github.io/blog/eqctf2025</link><guid isPermaLink="true">https://gr1d-init.github.io/blog/eqctf2025</guid><description>Writeups for Equilibrium Solo CTF 2025</description><pubDate>Sat, 25 Jan 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Reverse Engineering&lt;/h2&gt;
&lt;hr&gt;
&lt;h2&gt;Baka Mitai&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.CsKevD8e_Z178FvC.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Check file information using checksec&lt;/li&gt;
&lt;li&gt;Decompilation using ghidra, check the flagchecker flow&lt;/li&gt;
&lt;li&gt;Deploy angr script, perform symbolic analysis
&lt;em&gt;References:&lt;/em&gt;
https://shinmao.github.io/posts/2022/02/bp1/
https://github.com/jakespringer/angr_ctf&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Using checksec, we realised the file is dynamcally linked, stripped
&lt;img src=&quot;https://gr1d-init.github.io/_astro/fileinfo.M0rQw6qx_pkQ2q.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Decompile with ghidra, since it&apos;s stripped, we have to find the main entry from entry function
&lt;img src=&quot;https://gr1d-init.github.io/_astro/entryFunction.CWV-0_iT_ZRD18R.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Try to rename the variables, functions, for ease of analysis
&lt;img src=&quot;https://gr1d-init.github.io/_astro/renamed.DrgXV0fX_Z13S5Iy.webp&quot; alt=&quot;&quot;&gt;
From this point, we could know that:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;The program proceed if flag length == 0x37 (55 characters),&lt;/li&gt;
&lt;li&gt;It go through complex transformation, lastly doing flagcheck and tell if the flag provide from user input is correct&lt;/li&gt;
&lt;li&gt;Well, we are not going to reverse and go through these complex transformations.&lt;/li&gt;
&lt;li&gt;Instead, we will deploy angr script, automate this process&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;I deployed the angr script on google colab
&lt;img src=&quot;https://gr1d-init.github.io/_astro/googleColab._N2KWjEW_Z1HlLUY.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;!pip install angr

import angr
import claripy
  
# Define binary path and parameters
input_file_path = &apos;./chall&apos;
flag_length = 55
known_string = &apos;EQCTF{&apos;
FIND_ADDR = 0x4016e4
AVOID_ADDR = [0x4016fa, 0x40159f]
START_ADDR = 0x40158d

# Load the binary
proj = angr.Project(input_file_path, auto_load_libs=False, main_opts={&apos;base_addr&apos;: 0x400000})
  
# Create symbolic characters for the flag
known_chars = [claripy.BVV((known_string[i])) for i in range(len(known_string))]
flag_chars = [claripy.BVS(f&quot;flag_{i}&quot;, 8) for i in range(flag_length - len(known_string))]
flag = claripy.Concat(*known_chars + flag_chars)

# Create a blank state at the start address
state = proj.factory.blank_state(addr=START_ADDR)
state.options.add(angr.options.LAZY_SOLVES)
state.options.add(angr.options.UNICORN)
  
# Define the address of the local variable `local_58` (e.g., `[RBP - 0x50]`)
# Assume RBP is initialized to some stack base (common for blank_state)
stack_base = state.regs.rbp
local_58_address = stack_base - 0x50  # Offset to local variable `local_58`
  
# Store the symbolic flag into `local_58`
state.memory.store(local_58_address, flag)

# Pass the address of `local_58` in RDI (used by __isoc23_scanf)
state.regs.rdi = local_58_address

# Add constraints to ensure flag is printable (ASCII range 0x20 to 0x7e)
for k in flag_chars:
    state.solver.add(k &amp;#x3C; 0x7f)  # Less than 0x7f (127)
    state.solver.add(k &gt; 0x20)  # Greater than 0x20 (32)

# Create a simulation manager
sim_manager = proj.factory.simulation_manager(state)

# Explore paths to find the target address while avoiding bad paths
sim_manager.explore(find=FIND_ADDR, avoid=AVOID_ADDR)

# Check if a solution was found
if len(sim_manager.found) &gt; 0:
    # Evaluate the symbolic flag to retrieve its value
    solution = sim_manager.found[0].solver.eval(flag, cast_to=bytes)
    print(f&quot;Flag found: {solution.decode()}&quot;)
else:
    print(&quot;No solution found.&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To understand how this script works in details, do check out the references provided, and follow the tutorials.
The scripting is hard, it just follow a strict template.
However, there are few points worth mentioning,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the start_addr, should be placed after scanf CALL instruction, better if placed at where complex transformation start&lt;/li&gt;
&lt;li&gt;symbolic stack approach is an important point, specifically for this challenge where you can&apos;t just use a universal angr template&lt;/li&gt;
&lt;li&gt;blank_state should be used instead of entry_state because strlen is called before scanf, if you define the sim manager with entry state, it will waste extra resources going through strlen library call. Within all libc library call, there are mutex locks which angr cant deal with, which is why you need to hook the function and simulate user input with symbolic memory&lt;/li&gt;
&lt;li&gt;find_addr, is the desired memory location where the instance of &quot;Correct&quot; is reached&lt;/li&gt;
&lt;li&gt;avoid_addr are the memory location to avoid such as &quot;Wrong&quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/finalResult.qhUeuRYg_Z2Hu15.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Cryptic Token Diffusion&lt;/h2&gt;
&lt;h2&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.C2dTRo4D_1ONksG.webp&quot; alt=&quot;&quot;&gt;&lt;/h2&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Perform binary diffing&lt;/li&gt;
&lt;li&gt;Match index number to correspond characters&lt;/li&gt;
&lt;li&gt;Rearrange the character in ascending order according to their index number
&lt;em&gt;Tools required: vbindiff&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Viewing the files, there are two versions of application. Thus, we try to compare the difference between versions.
&lt;img src=&quot;https://gr1d-init.github.io/_astro/files.7fkW2lfk_Z241GSH.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;vbindiff vault-v1.0.0.elf vault-1.2.1.elf
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Observe the pattern, we realised that there are two parts showing difference in binaries:
&lt;ul&gt;
&lt;li&gt;vault-v1.0.0 acts as the index number, corresponds to the characters in vault-v1.2.1
&lt;em&gt;Part 1&lt;/em&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/diff1.C2R5bIcs_ZFU6kz.webp&quot; alt=&quot;&quot;&gt;
&lt;em&gt;Part 2&lt;/em&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/diff2.DWSPMhxC_Z3AhYj.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;List out all the correspondence, sort them in ascending order, turn to ASCII and print it out&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v1p1 = [12, 28, 0, 23, 15, 21, 10, 4, 27, 5, 26, 8, 17, 3, 18, 25]
v1p2 = [9, 13, 7, 24, 6, 2, 1, 11, 14, 22, 29, 16, 19, 20]

v2p1 = [0x37, 0x67, 0x45, 0x31, 0x62, 0x5f, 0x30, 0x46, 0x6e, 0x7b, 0x31, 0x74, 0x6e, 0x54, 0x34, 0x66]
v2p2 = [0x72, 0x30, 0x6E, 0x66, 0x31, 0x43, 0x51, 0x5F, 0x5F, 0x64, 0x7D, 0x31, 0x72, 0x79]

v1 = v1p1 + v1p2
v2 = v2p1 + v2p2

pairs = sorted(zip(v1, v2))

sorted_ascii = &apos;&apos;.join(chr(value) for _, value in pairs)

print(sorted_ascii)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Final Result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/solution.B9WEySsu_1aAU3h.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Gen Z&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.X0swvYMg_1pBuki.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Deobfuscate the C code, you may choose not to as it just work&lt;/li&gt;
&lt;li&gt;Observe the log, figure out how the flag might relate to the timestamp&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Opening the file, you will see obfuscated C code&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;#define rn ;
#define finna =
#define cap !=
#define mf *
#define bouta &amp;#x26;
#define ongod ++
#define sheesh &amp;#x3C;
#define fr &amp;#x3C;&amp;#x3C;
#define bet if
#define chief main
#define yikes break
#define deadass return
#define skibidi {
#define tho }
#define bussin cout
#define huh true
#define lit double

#include &amp;#x3C;iostream&gt;
#include &amp;#x3C;fstream&gt;
#include &amp;#x3C;iomanip&gt;
#include &amp;#x3C;openssl/sha.h&gt;


using namespace std rn

unsigned int seed() skibidi
    deadass static_cast&amp;#x3C;unsigned int&gt;(time(nullptr)) rn
tho

string getHash(lit value) skibidi
    ostringstream oss rn
    oss fr setprecision(17) fr value rn
    string text finna oss.str() rn
    unsigned char hash[SHA256_DIGEST_LENGTH] rn
    SHA256(reinterpret_cast&amp;#x3C;const unsigned char mf&gt;(text.c_str()), text.size(), hash) rn
    ostringstream result rn
    for (int i finna 0 rn i sheesh SHA256_DIGEST_LENGTH rn i ongod) {
        result fr hex fr setw(2) fr setfill(&apos;0&apos;) fr static_cast&amp;#x3C;int&gt;(hash[i]) rn
    tho
    deadass result.str() rn
tho


int chief() skibidi
    while (huh) skibidi
        unsigned int s finna seed() rn
        srand(s) rn
        int x finna rand() rn

        string flag finna getHash(x) rn

        bet (flag.find(&quot;a9ba358e&quot;) cap string::npos) {  
            ofstream outfile(&quot;./flag&quot;) rn
            bet (outfile.is_open()) {
                outfile fr &quot;EQCTF{&quot; fr flag fr &quot;tho&quot; rn
                outfile.close() rn
            tho
            yikes rn
        tho
  
        time_t now finna time(0) rn
        tm mf ltm finna localtime(bouta now) rn


        bussin fr &quot;[&quot; fr 1900 + ltm-&gt;tm_year fr &quot;-&quot; rn
        bussin fr 1 + ltm-&gt;tm_mon fr &quot;-&quot; rn
        bussin fr ltm-&gt;tm_mday fr &quot;] &quot; rn
        bussin fr &quot;🤓☝️ erm actually, you&apos;re incorrect 🥺👉👈: &quot; fr x fr endl rn
    tho
    bussin fr &quot;Good job Skibidisigma 🐺🥶 - Adolf Rizzler 🗿&quot; fr endl rn

    deadass 0 rn
tho
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just replace the obfuscated part with its actual symbol as shown in define list, to ease our debugging process.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;After debobfuscation,&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;#include &amp;#x3C;iostream&gt;
#include &amp;#x3C;fstream&gt;
#include &amp;#x3C;iomanip&gt;
#include &amp;#x3C;openssl/sha.h&gt;
  
using namespace std;
  
unsigned int seed()
{
    return static_cast&amp;#x3C;unsigned int&gt;(time(nullptr));
}

string getHash(double value)
{
    ostringstream oss;
    oss &amp;#x3C;&amp;#x3C; setprecision(17) &amp;#x3C;&amp;#x3C; value;
    string text = oss.str();
  
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256(reinterpret_cast&amp;#x3C;const unsigned char *&gt;(text.c_str()), text.size(), hash);

    ostringstream result;
    for (int i = 0; i &amp;#x3C; SHA256_DIGEST_LENGTH; i++)
    {
        result &amp;#x3C;&amp;#x3C; hex &amp;#x3C;&amp;#x3C; setw(2) &amp;#x3C;&amp;#x3C; setfill(&apos;0&apos;) &amp;#x3C;&amp;#x3C; static_cast&amp;#x3C;int&gt;(hash[i]);
    }
    return result.str();
}


int main()
{
    while (true)
    {
        unsigned int s = seed();
        srand(s);
        int x = rand();

        string flag = getHash(x);

        if (flag.find(&quot;a9ba358e&quot;) != string::npos)
        {
            ofstream outfile(&quot;./flag&quot;);
            if (outfile.is_open())
            {
                outfile &amp;#x3C;&amp;#x3C; &quot;EQCTF{&quot; &amp;#x3C;&amp;#x3C; flag &amp;#x3C;&amp;#x3C; &quot;}&quot;;
                outfile.close();
            }
            break;
        }

        time_t now = time(0);
        tm *ltm = localtime(&amp;#x26;now);
  
        cout &amp;#x3C;&amp;#x3C; &quot;[&quot; &amp;#x3C;&amp;#x3C; 1900 + ltm-&gt;tm_year &amp;#x3C;&amp;#x3C; &quot;-&quot;;
        cout &amp;#x3C;&amp;#x3C; 1 + ltm-&gt;tm_mon &amp;#x3C;&amp;#x3C; &quot;-&quot;;
        cout &amp;#x3C;&amp;#x3C; ltm-&gt;tm_mday &amp;#x3C;&amp;#x3C; &quot;] &quot;;
        cout &amp;#x3C;&amp;#x3C; &quot;🤓☝️ erm actually, you&apos;re incorrect 🥺👉👈: &quot; &amp;#x3C;&amp;#x3C; x &amp;#x3C;&amp;#x3C; endl;
    }
    cout &amp;#x3C;&amp;#x3C; &quot;Good job Skibidisigma 🐺🥶 - Adolf Rizzler 🗿&quot; &amp;#x3C;&amp;#x3C; x &amp;#x3C;&amp;#x3C; endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Observing the logfile,
&lt;img src=&quot;https://gr1d-init.github.io/_astro/logfile.CDQ6qzsm_eSnK9.webp&quot; alt=&quot;&quot;&gt;
We should focus that flag is paired up on [2025-01-01], so we should patch our c code to run on that time stamp, and which we just need to fix the seed() function
Part that affect:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;unsigned int s = seed();
srand(s);
int x = rand();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Patched seed() function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;// Brute-force timestamp around 2025-01-01
unsigned int seed() {
    static time_t test_time = 1735689600;  // 2025-01-01 00:00:00 UTC
    if (test_time &amp;#x3C;= 1735775999) {  // 2025-01-01 23:59:59 UTC
        return static_cast&amp;#x3C;unsigned int&gt;(test_time++);
    }
    return static_cast&amp;#x3C;unsigned int&gt;(time(nullptr)); // Fallback to current time
}
// -------------------------------------------
// You may also add the line for Found correct seed: to indicate that you found correct seed
if (flag.find(&quot;a9ba358e&quot;) != string::npos) { 
    ofstream outfile(&quot;./flag&quot;); 
    if (outfile.is_open()) { 
        outfile &amp;#x3C;&amp;#x3C; &quot;EQCTF{&quot; &amp;#x3C;&amp;#x3C; flag &amp;#x3C;&amp;#x3C; &quot;}&quot;; 
        outfile.close(); } 
        cout &amp;#x3C;&amp;#x3C; &quot;Found correct seed: &quot; &amp;#x3C;&amp;#x3C; s &amp;#x3C;&amp;#x3C; endl; 
        break; 
    }
...
...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Due to the usage of openssl/sha.h, we should compile our C++ file as below&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;g++ -o gen_z chall.cpp -lssl -lcrypto
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Execute the file&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./gen_z
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Final result&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/correctSeed.Cj_PW3GY_23XS2J.webp&quot; alt=&quot;&quot;&gt;
And flag file is generated:
&lt;img src=&quot;https://gr1d-init.github.io/_astro/flag.fZPoe3fx_Z2abYJp.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Github&lt;/h2&gt;
&lt;p&gt;Here compiles all the challenge related to bruteforing github commit SHA1 hashes&lt;/p&gt;
&lt;h3&gt;Goals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Some commits are deleted, but it is still hidden on github with original SHA1 key unless the whole repo is deleted and rebuilt.&lt;/li&gt;
&lt;li&gt;We need to scrape the hidden commit by doing bruteforcing from hex 0000 until ffff to retrieve all the available commit hashes&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Challenges&lt;/h3&gt;
&lt;p&gt;| Challenges | Category |
| -------- | -------- |
| Garry: Beyond Music&apos;s End 3 | OSINT |
| Github is weirdddd 1.0 | Brainfuck |
| Github is weirdddd 2.0 | Brainfuck |&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;@gr1d    wrote a bruteforce tool, &lt;a href=&quot;https://github.com/gr1d-init/gitsha&quot;&gt;GitSHA&lt;/a&gt;, for these challenges.&lt;/p&gt;
&lt;h4&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Install the tool.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash=&quot;&gt;git clone https://github.com/gr1d-init/gitsha.git
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Automate bruteforcing with the tool.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash=&quot;&gt;python gitsha.py -r &quot;&amp;#x3C;author&apos;s name&gt;/&amp;#x3C;repo&apos;s name&gt;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Final result&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Garry: Beyond Music&apos;s End 3&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;3419
4568 #
66f8
8da4 #
a5b6 #
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Github is weirdddd 1.0 and 2.0&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;0067
0b3d
2a63
458e (GitHub 2.0)
481f
4bec
5b27
5ef6
621e
693a
724c
8f66
a24a
b2ff
c47a
cf29
cfba (GitHub 1.0)
ed44
ed90
f6aa
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Flags&lt;/h4&gt;
&lt;p&gt;| Challenges | Category |
| -------- | -------- |
| Garry: Beyond Music&apos;s End 3 | EQCTF{w1z4rd_0f_l3g3nds_1n_d1sgu1s3} |
| Github is weirdddd 1.0 | EQCTF{hmmmmmmmm_G1t_L3ak_d@_Fl3g} |
| Github is weirdddd 2.0 | EQCTF{Brut3333333333_D@_C0mm1t_99} |&lt;/p&gt;</content:encoded><h:img src="/_astro/eqctfbanner.BhVFHB-a.png"/><enclosure url="/_astro/eqctfbanner.BhVFHB-a.png"/></item><item><title>UTM CyberX Internal CTF 2024</title><link>https://gr1d-init.github.io/blog/cyberxctf2024</link><guid isPermaLink="true">https://gr1d-init.github.io/blog/cyberxctf2024</guid><description>Writeups for UTM CyberX Internal CTF 2024</description><pubDate>Fri, 27 Dec 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Forensics&lt;/h2&gt;
&lt;hr&gt;
&lt;h2&gt;Apocalypse&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/question.C4n4xyLH_1AvlSD.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;Notorious hacker CyberSteal6969 has struck again, this time targeting CyberX, stealing a highly confidential flag. Our team managed to seize his personal computer, but the system was wiped clean, except for a single, suspicious image left behind.&lt;/p&gt;
&lt;p&gt;Reports suggest CyberSteal6969 may have been communicating with his counterpart using morse code from video. But leave no stone unturned. Can you uncover the secrets within and retrieve the stolen flag?&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Goals&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Use pngchecker to check the status of the given image, obtained ERROR:&quot;additional data after IEND chunk&quot;, which is after the cropped image&lt;/li&gt;
&lt;li&gt;Use Acropalypse-Multi-Tool to recover the full image
https://www.youtube.com/watch?v=R866SnJoKQg&lt;/li&gt;
&lt;li&gt;Login to flickr with the credentials given&lt;/li&gt;
&lt;li&gt;Try to find some useful informations across profile&lt;/li&gt;
&lt;li&gt;Grab the pictures and analyse the metadata&lt;/li&gt;
&lt;li&gt;Use wayback machine to track past version across the sites&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;pngchecker analyse the image&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/pngchecker.Bj8GwY4s_Z1xNjkf.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Use the script to recover the full image&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;import zlib
import io
import struct
import tempfile
import os

class Acropalypse():
    def parse_png_chunk(self, stream):
        size = int.from_bytes(stream.read(4), &quot;big&quot;)
        ctype = stream.read(4)
        body = stream.read(size)
        csum = int.from_bytes(stream.read(4), &quot;big&quot;)
        assert(zlib.crc32(ctype + body) == csum)
        return ctype, body

    def pack_png_chunk(self, stream, name, body):
        stream.write(len(body).to_bytes(4, &quot;big&quot;))
        stream.write(name)
        stream.write(body)
        crc = zlib.crc32(body, zlib.crc32(name))
        stream.write(crc.to_bytes(4, &quot;big&quot;))
        
    def reconstruct_image(self, cropped_image_file, img_width, img_height, rgb_alpha):
        PNG_MAGIC = b&quot;\x89PNG\r\n\x1a\n&quot;

        orig_width = img_width
        orig_height = img_height

        with open(cropped_image_file, &quot;rb&quot;) as f_in:
            magic = f_in.read(len(PNG_MAGIC))
            assert magic == PNG_MAGIC

            # find end of cropped PNG
            while True:
                ctype, body = self.parse_png_chunk(f_in)
                if ctype == b&quot;IEND&quot;:
                    break

            # grab the trailing data
            trailer = f_in.read()
            
            print(f&quot;Found {len(trailer)} trailing bytes!&quot;)

            # find the start of the next idat chunk
            try:
                next_idat = trailer.index(b&quot;IDAT&quot;, 12)
            except ValueError:
                raise Exception(&quot;No trailing IDATs found!&quot;)

            # skip first 12 bytes in case they were part of a chunk boundary
            idat = trailer[12:next_idat-8] # last 8 bytes are crc32, next chunk len

            stream = io.BytesIO(trailer[next_idat-4:])

            while True:
                ctype, body = self.parse_png_chunk(stream)
                if ctype == b&quot;IDAT&quot;:
                    idat += body
                elif ctype == b&quot;IEND&quot;:
                    break
                else:
                    raise Exception(&quot;Unexpected chunk type: &quot; + repr(ctype))

            idat = idat[:-4] # slice off the adler32

            print(f&quot;Extracted {len(idat)} bytes of idat!&quot;)

            print(&quot;Building bitstream...&quot;)
            bitstream = []
            for byte in idat:
                for bit in range(8):
                    bitstream.append((byte &gt;&gt; bit) &amp;#x26; 1)

            # add some padding so we don&apos;t lose any bits
            for _ in range(7):
                bitstream.append(0)

            print(&quot;Reconstructing bit-shifted bytestreams...&quot;)
            byte_offsets = []
            for i in range(8):
                shifted_bytestream = []
                for j in range(i, len(bitstream)-7, 8):
                    val = 0
                    for k in range(8):
                        val |= bitstream[j+k] &amp;#x3C;&amp;#x3C; k
                    shifted_bytestream.append(val)
                byte_offsets.append(bytes(shifted_bytestream))

            # bit wrangling sanity checks
            assert(byte_offsets[0] == idat)
            assert(byte_offsets[1] != idat)

            print(&quot;Scanning for viable parses...&quot;)

            # prefix the stream with 32k bytes so backrefs can work
            prefix_length = 0x8000
            prefix = b&quot;\x00&quot; + (prefix_length).to_bytes(2, &quot;little&quot;) + (prefix_length ^ 0xffff).to_bytes(2, &quot;little&quot;) + b&quot;\x00&quot; * prefix_length

            for i in range(len(idat)):
                truncated = byte_offsets[i%8][i//8:]

                # only bother looking if it&apos;s (maybe) the start of a non-final adaptive huffman coded block
                if truncated[0]&amp;#x26;7 != 0b100:
                    continue

                d = zlib.decompressobj(wbits=-15)
                try:
                    decompressed = d.decompress(prefix+truncated) + d.flush(zlib.Z_FINISH)
                    decompressed = decompressed[prefix_length:] # remove leading padding
                    if d.eof and d.unused_data in [b&quot;&quot;, b&quot;\x00&quot;]: # there might be a null byte if we added too many padding bits
                        print(f&quot;Found viable parse at bit offset {i}!&quot;)
                        # XXX: maybe there could be false positives and we should keep looking?
                        break
                    else:
                        print(f&quot;Parsed until the end of a zlib stream, but there was still {len(d.unused_data)} bytes of remaining data. Skipping.&quot;)
                except zlib.error as e: # this will happen almost every time
                    pass
            else:
                print(&quot;Failed to find viable parse!&quot;)
                raise Exception(&quot;Failed to find viable parse!&quot;)

            print(&quot;Generating output PNG...&quot;)

            output_path = os.path.join(tempfile.gettempdir(), &apos;restored.png&apos;)
            with open(output_path, &quot;wb&quot;) as out:
                out.write(PNG_MAGIC)

                ihdr = b&quot;&quot;
                ihdr += orig_width.to_bytes(4, &quot;big&quot;)
                ihdr += orig_height.to_bytes(4, &quot;big&quot;)
                ihdr += (8).to_bytes(1, &quot;big&quot;) # bitdepth
                if rgb_alpha:
                    ihdr += (6).to_bytes(1, &quot;big&quot;) # true colour with alpha
                else:
                    ihdr += (2).to_bytes(1, &quot;big&quot;) # true colour
                ihdr += (0).to_bytes(1, &quot;big&quot;) # compression method
                ihdr += (0).to_bytes(1, &quot;big&quot;) # filter method
                ihdr += (0).to_bytes(1, &quot;big&quot;) # interlace method

                self.pack_png_chunk(out, b&quot;IHDR&quot;, ihdr)

                # fill missing data with solid magenta
                if rgb_alpha:
                    reconstructed_idat = bytearray((b&quot;\x00&quot; + b&quot;\xff\x00\xff\xff&quot; * orig_width) * orig_height)
                else:
                    reconstructed_idat = bytearray((b&quot;\x00&quot; + b&quot;\xff\x00\xff&quot; * orig_width) * orig_height)

                # paste in the data we decompressed
                reconstructed_idat[-len(decompressed):] = decompressed

                self.pack_png_chunk(out, b&quot;IDAT&quot;, zlib.compress(reconstructed_idat))
                self.pack_png_chunk(out, b&quot;IEND&quot;, b&quot;&quot;)

            print(&quot;Done!&quot;)
            return output_path

# Create an instance of the Acropalypse class
acropalypse = Acropalypse()

# Reconstruct the image using the correct resolution of 1920x1080
output_image_path = acropalypse.reconstruct_image(&apos;cm.png&apos;, 1920, 1080, True) // change to your input image file name

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;References: https://youtu.be/R866SnJoKQg?si=rby5gJoYa2s9zR4N&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Retrieve the recovered full image from the specified output directory: /tmp folder
&lt;img src=&quot;https://gr1d-init.github.io/_astro/restored.D8Nqn219_BhaT1.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Login to flickr with the credentials obtained from the recovered image&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;cybersteal6969@gmail.com
sh8UPt-S&quot;Cp-6i+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://gr1d-init.github.io/_astro/login.C8rI4CJP_Z2pUobN.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
5. Browse through cybersteal6969&apos;s profile, we found two videos, flag1 and flag2&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/cyberstealprofiile.Ci2fFgDc_19weuK.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
6. From the video, we analyse the morse code, given &quot;NO FLAG FOR YOU TRY SOMETHING ELSE&quot;
Morse Code Analyser: https://morsecode.world/international/decoder/audio-decoder-adaptive.html
7. From the videos, we know that, it was posted by info stealer6969, shared to cybersteal6969, two of them are communicating&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/infostealerposted.Bw6rEp4w_156IcI.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
8. Enter info stealer6969 profile, we found another video, named flag, analyse the morse code, we get &quot;GOODJOBG3TT1NGH3R3&quot;, this is the first decoy flag&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/infostealervid.DXNwlSn0_ZtBvbG.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
9. Keep browsing, we found that info stealer6969 uploaded bunch of pictures&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/infopic.BM0iuDxh_21dxf8.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
10. These pictures containing secret info in their metadata
11. Using exiftool, we found that cat.jpg directs us to https://cyberxstupid.blogspot.com/2024/12/blog-post.html, shown at comment section&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/cat.BAUEqhp1_Zs5cIe.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/exifcat.DhzIJ5PR_1H0x1d.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
12. Randomly clicking through the site, we found the second decoy flag CyberX{c4t_m0us3_g4m3_34sy}&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/first.D42fyZ31_ZdQxN6.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
13. Here we need to use Wayback Mahcine, archive.org, to track the past version of the site.&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/wayback.CMN4U3K5_Z1Ypaov.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
14. Under the same link but in past version, we obtain the final flag CyberX{c4t_m0us3_pl4y_m4d3_34s13r}&lt;br&gt;
&lt;img src=&quot;https://gr1d-init.github.io/_astro/waybackflag.C94webAU_1n6iC8.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</content:encoded><h:img src="/_astro/cyberx.B36SDQ5v.png"/><enclosure url="/_astro/cyberx.B36SDQ5v.png"/></item><item><title>Personalized Customization Guide</title><link>https://gr1d-init.github.io/blog/customize</link><guid isPermaLink="true">https://gr1d-init.github.io/blog/customize</guid><description>astro-theme-pure Personalized Customization Guide</description><pubDate>Sat, 27 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Site Configuration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cworld1/astro-theme-pure&quot;&gt;astro-theme-pure&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Customizing this theme requires adjusting a significant amount of source code.&lt;/p&gt;
&lt;p&gt;We have made efforts to centralize the configuration options in the &lt;code&gt;src/site.config.ts&lt;/code&gt; file for user convenience and have integrated a variety of common social media/tools icons. If you want to add new icons, you will need to modify the source code yourself.&lt;/p&gt;
&lt;p&gt;You can globally search for the following keywords to find the text that needs to be replaced:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lorem ipsum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;astro-theme-pure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cworld&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, we will introduce each aspect in detail.&lt;/p&gt;
&lt;h3&gt;Configuration Files&lt;/h3&gt;
&lt;p&gt;See &lt;a href=&quot;/docs/integrations/configuration&quot;&gt;Configuration Files&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4&gt;Waline Comment System&lt;/h4&gt;
&lt;p&gt;See &lt;a href=&quot;/docs/integrations/comment&quot;&gt;Waline Comment System&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4&gt;Footer&lt;/h4&gt;
&lt;p&gt;Currently supported social media include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coolapk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;telegram&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;github&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bilibili&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twitter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zhihu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;steam&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netease_music&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to add new social media, you need to modify the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;src/types.ts&lt;/code&gt;: Add a new &lt;code&gt;SocialLink.name&lt;/code&gt; enum value and the icon mapping relationship for &lt;code&gt;SocialMediaIconId&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;public/icons/social.svg&lt;/code&gt;: Follow the existing format and add a new icon as a symbol&lt;/p&gt;
&lt;p&gt;It is recommended to find social media icons on the following websites to maintain consistency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://remixicon.com/&quot;&gt;remixicon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mingcute.com/&quot;&gt;mingcute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other Files to Replace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public/favicon&lt;/code&gt;: The site&apos;s favicon. You can generate a favicon at &lt;a href=&quot;https://favicon.io/favicon-converter/&quot;&gt;favicon.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public/images/social-card.png&lt;/code&gt;: The site&apos;s social card&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/assets/&lt;/code&gt;: This directory contains client-rendered avatars, sponsorship QR codes, and other images. Please replace them with your own images&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Pages&lt;/h2&gt;
&lt;h3&gt;About&lt;/h3&gt;
&lt;p&gt;Currently supported icons can be found in the &lt;code&gt;src/icons&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;If you want to add new Tools icons, you need to add a new icon in the &lt;code&gt;src/icons&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;It is recommended to find new icons on the following websites to maintain consistency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://icon-sets.iconify.design/&quot;&gt;iconify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://icones.js.org/&quot;&gt;icones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deployment Mode&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&quot;/docs/deployment&quot;&gt;Deployment&lt;/a&gt; for details.&lt;/p&gt;</content:encoded><h:img src="/_astro/thumbnail.H3t_xmcX.jpg"/><enclosure url="/_astro/thumbnail.H3t_xmcX.jpg"/></item><item><title>Markdown Syntax Support</title><link>https://gr1d-init.github.io/blog/markdown</link><guid isPermaLink="true">https://gr1d-init.github.io/blog/markdown</guid><description>Markdown is a lightweight markup language.</description><pubDate>Fri, 26 Jul 2024 08:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Basic Syntax&lt;/h2&gt;
&lt;p&gt;Markdown is a lightweight and easy-to-use syntax for styling your writing.&lt;/p&gt;
&lt;h3&gt;Headers&lt;/h3&gt;
&lt;p&gt;When the content of the article is extensive, you can use headers to segment:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# Header 1

## Header 2

## Large Header

### Small Header
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Header previews would disrupt the structure of the article, so they are not displayed here.&lt;/p&gt;
&lt;h3&gt;Bold and Italics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;_Italic text_ and **Bold text**, together will be **_Bold Italic text_**
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Italic text&lt;/em&gt; and &lt;strong&gt;Bold text&lt;/strong&gt;, together will be &lt;strong&gt;&lt;em&gt;Bold Italic text&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;Text link [Link Name](http://link-url)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;Text link &lt;a href=&quot;http://link-url&quot;&gt;Link Name&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Inline Code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;This is an `inline code`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;This is an &lt;code&gt;inline code&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Code Blocks&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;```js
// calculate fibonacci
function fibonacci(n) {
  if (n &amp;#x3C;= 1) return 1
  const result = fibonacci(n - 1) + fibonacci(n - 2) // [\!code --]
  return fibonacci(n - 1) + fibonacci(n - 2) // [\!code ++]
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// calculate fibonacci
function fibonacci(n) {
  if (n &amp;#x3C;= 1) return 1
  const result = fibonacci(n - 1) + fibonacci(n - 2) // [!code --]
  return fibonacci(n - 1) + fibonacci(n - 2) // [!code ++]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Currently using shiki as the code highlighting plugin. For supported languages, refer to &lt;a href=&quot;https://shiki.matsu.io/languages.html&quot;&gt;Shiki: Languages&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Inline Formula&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;This is an inline formula $e^{i\pi} + 1 = 0$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;This is an inline formula $e^{i\pi} + 1 = 0$&lt;/p&gt;
&lt;h3&gt;Formula Blocks&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;$$
\hat{f}(\xi) = \int_{-\infty}^{\infty} f(x) e^{-2\pi i x \xi} \, dx
$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;$$
\hat{f}(\xi) = \int_{-\infty}^{\infty} f(x) e^{-2\pi i x \xi} , dx
$$&lt;/p&gt;
&lt;p&gt;Currently using KaTeX as the math formula plugin. For supported syntax, refer to &lt;a href=&quot;https://katex.org/docs/supported.html&quot;&gt;KaTeX Supported Functions&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Images&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![CWorld](https://cravatar.cn/avatar/1ffe42aa45a6b1444a786b1f32dfa8aa?s=200)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cravatar.cn/avatar/1ffe42aa45a6b1444a786b1f32dfa8aa?s=200&quot; alt=&quot;CWorld&quot;&gt;&lt;/p&gt;
&lt;h4&gt;Strikethrough&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;~~Strikethrough~~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;~~Strikethrough~~&lt;/p&gt;
&lt;h3&gt;Lists&lt;/h3&gt;
&lt;p&gt;Regular unordered list&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;- 1
- 2
- 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regular ordered list&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;1. GPT-4
2. Claude Opus
3. LLaMa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GPT-4&lt;/li&gt;
&lt;li&gt;Claude Opus&lt;/li&gt;
&lt;li&gt;LLaMa&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can continue to nest syntax within lists.&lt;/p&gt;
&lt;h3&gt;Blockquotes&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&gt; Gunshot, thunder, sword rise. A scene of flowers and blood.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gunshot, thunder, sword rise. A scene of flowers and blood.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can continue to nest syntax within blockquotes.&lt;/p&gt;
&lt;h3&gt;Line Breaks&lt;/h3&gt;
&lt;p&gt;Markdown needs a blank line to separate paragraphs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;If you don&apos;t leave a blank line
it will be in one paragraph

First paragraph

Second paragraph
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;If you don&apos;t leave a blank line
it will be in one paragraph&lt;/p&gt;
&lt;p&gt;First paragraph&lt;/p&gt;
&lt;p&gt;Second paragraph&lt;/p&gt;
&lt;h3&gt;Separators&lt;/h3&gt;
&lt;p&gt;If you have the habit of writing separators, you can start a new line and enter three dashes &lt;code&gt;---&lt;/code&gt; or asterisks &lt;code&gt;***&lt;/code&gt;. Leave a blank line before and after when there are paragraphs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Advanced Techniques&lt;/h2&gt;
&lt;h3&gt;Inline HTML Elements&lt;/h3&gt;
&lt;p&gt;Currently, only some inline HTML elements are supported, including &lt;code&gt;&amp;#x3C;kdb&gt; &amp;#x3C;b&gt; &amp;#x3C;i&gt; &amp;#x3C;em&gt; &amp;#x3C;sup&gt; &amp;#x3C;sub&gt; &amp;#x3C;br&gt;&lt;/code&gt;, such as&lt;/p&gt;
&lt;h4&gt;Key Display&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;Use &amp;#x3C;kbd&gt;Ctrl&amp;#x3C;/kbd&gt; + &amp;#x3C;kbd&gt;Alt&amp;#x3C;/kbd&gt; + &amp;#x3C;kbd&gt;Del&amp;#x3C;/kbd&gt; to reboot the computer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;Use Ctrl + Alt + Del to reboot the computer&lt;/p&gt;
&lt;h4&gt;Bold Italics&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;#x3C;b&gt; Markdown also applies here, such as _bold_ &amp;#x3C;/b&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt; Markdown also applies here, such as &lt;em&gt;bold&lt;/em&gt; &lt;/p&gt;
&lt;h3&gt;Other HTML Writing&lt;/h3&gt;
&lt;h4&gt;Foldable Blocks&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;&amp;#x3C;details&gt;&amp;#x3C;summary&gt;Click to expand&amp;#x3C;/summary&gt;It is hidden&amp;#x3C;/details&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;h3&gt;Tables&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;| Header1  | Header2  |
| -------- | -------- |
| Content1 | Content2 |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;| Header1  | Header2  |
| -------- | -------- |
| Content1 | Content2 |&lt;/p&gt;
&lt;h3&gt;Footnotes&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;Use [^footnote] to add a footnote at the point of reference.

Then, at the end of the document, add the content of the footnote (it will be rendered at the end of the article by default).

[^footnote]: Here is the content of the footnote
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;Use [^footnote] to add a footnote at the point of reference.&lt;/p&gt;
&lt;p&gt;Then, at the end of the document, add the content of the footnote (it will be rendered at the end of the article by default).&lt;/p&gt;
&lt;p&gt;[^footnote]: Here is the content of the footnote&lt;/p&gt;
&lt;h3&gt;To-Do Lists&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;- [ ] Incomplete task
- [x] Completed task
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Incomplete task&lt;/li&gt;
&lt;li&gt;[x] Completed task&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Symbol Escaping&lt;/h3&gt;
&lt;p&gt;If you need to use markdown symbols like _ # * in your description but don&apos;t want them to be escaped, you can add a backslash before these symbols, such as &lt;code&gt;\_&lt;/code&gt; &lt;code&gt;\#&lt;/code&gt; &lt;code&gt;\*&lt;/code&gt; to avoid it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;\_Don&apos;t want the text here to be italic\_

\*\*Don&apos;t want the text here to be bold\*\*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preview:&lt;/p&gt;
&lt;p&gt;_Don&apos;t want the text here to be italic_&lt;/p&gt;
&lt;p&gt;**Don&apos;t want the text here to be bold**&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Embedding Astro Components&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&quot;/docs/integrations/components&quot;&gt;User Components&lt;/a&gt; and &lt;a href=&quot;/docs/integrations/advanced&quot;&gt;Advanced Components&lt;/a&gt; for details.&lt;/p&gt;</content:encoded><h:img src="/_astro/thumbnail.HAXFr_hw.jpg"/><enclosure url="/_astro/thumbnail.HAXFr_hw.jpg"/></item></channel></rss>